
    $(function() {
        function getCookie(name) {
            var cookieValue = null;
            if (document.cookie && document.cookie != '') {
                var cookies = document.cookie.split(';');
                for (var i = 0; i < cookies.length; i++) {
                    var cookie = jQuery.trim(cookies[i]);
                    // Does this cookie string begin with the name we want?
                    if (cookie.substring(0, name.length + 1) == (name + '=')) {
                        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                        break;
                    }
                }
            }
            return cookieValue;
        }

        function csrfSafeMethod(method) {
            // these HTTP methods do not require CSRF protection
            return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));
        }
        $.ajaxSetup({
            beforeSend: function(xhr, settings) {
                if (!csrfSafeMethod(settings.type) && !this.crossDomain) {
                    xhr.setRequestHeader("X-CSRFToken", csrftoken);
                }
            }
        });



        var action = $("form").attr("action");


        var formId = $("form").attr("id");
        var hidden = $("[data-dropzone]");
        var id = hidden.attr("id") + "_div";

        var maxFiles = hidden.data("limit");
        var maxSize = 500 / maxFiles;

        var dropzoneDiv = $("<form />", {
            "name": name,
            "id": name,
        });

        hidden.after(dropzoneDiv);
        dropzoneDiv.append("{% csrf_token %}");

        Dropzone.autoDiscover = false;
        // or disable for specific dropzone:
        // Dropzone.options.myDropzone = false;



        options = {
            url: action,
            //parallelUploads: 2,
            uploadMultiple: true,
            maxFilesize: maxSize,
            addRemoveLinks: true,
            clickable: true,
            createImageThumbnails: true,
            maxFiles: maxFiles,
            autoProcessQueue: false,
            init: function() {

                $(this.element).addClass("dropzone");

                this.on("sending", function(file, xhr, formData) {
                    formData = $("#"+formId).serialize();

                });
            }
        };


          // Now that the DOM is fully loaded, create the dropzone, and setup the
          // event listeners
        var myDropzone = new Dropzone("#"+name, options);




        $("#submit-id-submit").click(function(e){

            e.preventDefault();
            e.stopPropagation();
            myDropzone.processQueue();
        });


        myDropzone.on("addedfile", function(file) {
            /* Maybe display some more file information on your page */
        });
    })



                '''
            data_dict = OrderedDict()

            for fs in template_.fieldsets.all():

                fs_dict = OrderedDict()
                field_templates = FieldTemplate.objects.filter(field_set=fs).order_by("position")

                if field_templates:
                    for ft in field_templates:
                        if ft.name in f.clean_data_only.keys():

                            fs_dict[ft.name] = f.clean_data_only[ft.name]

                if fs_dict:
                    data_dict[fs.name] = fs_dict
            '''





data = {
    "field_sets": {[   ]  },
    "category": form_response.category,
    "form_template": form_response.form_template,
    "html":
}





def prepare_data_files(data_bundle):

    request = data_bundle['request']
    form_data = data_bundle['form_data']
    form_template = data_bundle['form_template']
    compiled_data = {}

    form = Form(form_template)

    layout = form.helper.layout
    for field in layout.fields:

        if field.__class__.__name__ == "Fieldset":

            fs_dict = {}

            if field.legend:
                fs_key = field.legend
            else:
                fs_key = "NO FIELDSET"

            for f in field:
                fs_dict.update({f[0]: form_data[f[0]]})
                print f[0], form_data[f[0]]

            compiled_data.update({fs_key: fs_dict})

    all_files = request.FILES
    user = request.user

    uploaded_filename_list = []

    data = {
        "category": 	form_template.category.name,
        "name": 		form_template.name,
        "data":			compiled_data,
    }

    if user.is_authenticated():
        data.update({
                "user": {
                    "username": user.username,
                    "first_name": user.first_name,
                    "last_name": user.last_name,
                    "email": user.email
                }
            })

    form_response = FormData.objects.create(form_template=form_template, data=data)

    for file_list in all_files:

        files = request.FILES.getlist(file_list)

        for f in files:
            uploaded_filename_list.append(f.name)

            if settings.DEBUG == True:
                handle_uploaded_file(f, str(form_response.pk))

        form_response.data.update({
                "files": uploaded_filename_list
            })

    form_response.save()

    return form_response


    nd = nested_dict(results.data)

    fs_nd = nd["field_sets"]

    for k, v in fs_nd.items_flat():
        if "name" in k[1] and "sean" in v.lower():
            print k[1], v


{


def create_schema(form_response, form):

    category = form_response.form_template.category
    form_template = form_response.form_template
    field_sets = FieldSet.objects.filter(form_template=form_template).order_by("position")

    schema = {
        "category": {
        "id":  category.id,
        "name": category.name,
        "acronym": category.acronym,
        "form_template": {
                "id":  form_template.id,
                "name": form_template.name,
        }
    }

    fieldset_list = []

    for field_set in field_sets:
        field_set_dict = {

            "id": field_set.id,
            "name": field_set.name,
            "label": field_set.label,
            "position": field_set.position,

        }

        field_list = []

        for field_template in field_set.field_templates:

            field_template_dict = {

                "id": field_template.id,
                "name": field_template.name,
                "label": field_template.label,
                "html": field_template_html
            }

            field_list.append(field_template_dict)

        field_set_dict.update({ "field_templates": field_list })
        fieldset_list.append(field_set_dict)

    schema["category"]["form_template"].update({ "field_sets": fieldset_list })

    return schema

    for file_list in request.FILES:

        files = request.FILES.getlist(file_list)

        for f in files:
            uploaded_filename_list.append(f.name)

            if settings.DEBUG == True:
                handle_uploaded_file(f, str(form_response.pk))

    form_response.data.update({
            "files": uploaded_filename_list
        })


def pepare_files(posted_files):

    filenames = []
    prepped_files = []

    for file_list in posted_files:

        files = posted_files.getlist(file_list)

        for file in files:
            filename_list.append(f.name)
            prepped_files.append(file)

    return {
        "prepped_files": prepped_files,
        "filenames": filenames
    }





